Javascript Basics
-------------------

Prerequisites:
---------------
- HTML
- CSS
----------------------------------------------------------------------------------------------------

What will be covered?
----------------------
- What javascript is & when we use it
- Basic javascript syntax
- Working with datatypes (integers, strings, etc.)
- Control flow (loops & contional statements)
- The Document Object Model (DOM)
- Examples of javscript on webpages
----------------------------------------------------------------------------------------------------

What is javascript?
--------------------
- One of the 3 core languages
    - HTML - controls the structure of the web page
    - CSS  - controls the presentation & design
    - Javascript - adds behaviour and interavtivity
- Javascript is a scripting language
- Intentionally limited
- Doesn't have the features of other programming languages like C++, C#, Java, etc.
- Cannot communicate directly with database or file system of a computer
- However it is great at manipulating webpages

            Client/Browser                  Server
            ______________                ______________
           |              |   <-----     |              |
           |______________|              |______________|
                HTML                          ASP.NET
                CSS                             PHP
              Javascript                  Ruby on rails

- Javascript should enhance the audience experience only
- Do not rely on javascript to add new functionality to the website

- Javascript is NOT, and has Nothing to do with Java
- Javascript is just a name that was given to it while Java was bery popular
- The official name of javascript is ECMAScript
----------------------------------------------------------------------------------------------------

Hello World using JS:
---------------------
 refer - helloworld.html
----------------------------------------------------------------------------------------------------

Where to put your JS:
----------------------
- Place the javascript code "inside" the "head" or at the "end of the body" based on the need
- Place JS in the head while doing asynchronous scripting (only if needed)
- Place JS in the end of the body
- If the script is larger, use an external file to place all the JS code and link it with the html
    - Doesn't mess up with the HTML & other webpage content
    - While using it in multiple pages, need to update only once
    - More tidy & keeps things in a logical place

refer - helloworld.html, test.js (all javacript files end with .js extension)
----------------------------------------------------------------------------------------------------

Google chrome developer tools:
------------------------------
- Press 'F12' or right click on the webpage and select 'inspect' to open the chrome developer tools
- The 'Elements' tab will contain the html content.
- Right click on the JS file link from "<script src="test.js"> </script>" and
  select open in 'Resources' or 'Application' tab to view the contents of the JS file
- The 'console' tab can be used to view the logs and to perform many basic JS operations

    refer - https://youtu.be/JzZFccCEgGA to know more about developer tools
----------------------------------------------------------------------------------------------------

Basic javascript syntax and structure:
---------------------------------------
- case sensitive
- contains many statements, all ending with a semicolon ;
- not sensitive to whitespace or linebreaks

    - The examples below are all the same.

    Eg-1:
    alert('alert 1'); alert('alert 2');

    Eg-2:
    alert('alert 1');
    alert('alert 2');

    Eg-3:
    alert('alert 1');              alert('alert2');
    
- runs from top to bottom

- comments are similar to CSS
    - write multiline comments using /* */
        /*
            statement 1;
            statement 2;
            statement 3;
        */
    - write single line comment using //
        // statement
----------------------------------------------------------------------------------------------------

Variables:
-----------
- Initialize variables with 'var' keyword

- Set value in the same statement - Eg: var age = 10;

- variable value can contain letters, numbers, $ sign, _s but can never start with a number
    Egs: var age1; -> valid 
         var my_Varible -> valid
         var 1variable -> invalid

- Best practice - to use a specific naming convention for defining variables -> camel case (most preferred)
    Egs: var myVariable; ( 2 words - my, variable -> start with lowercase 'my' 
         var myNewApp;                               use uppercase for 'Variable')

- possible to change the type of variables (not recommended)
    Egs: var myVar = 'hello';
        myVar = 10; (trying to change a string to integer - this will work fine)

- need not specify the type of variable while initializing
    Eg: var myVar = 'hello'; (sets a string type to the variable)
    - string can be enclosed in single/double quotes (var myVar1 = 'hello'; var myVar2 = "hello";)

- called weakly typed language because of the last 2 points

----------------------------------------------------------------------------------------------------
Basic Math Operators:
----------------------
- 5 most common operators:
    - '=' assignment
    - '+' addition
    - '-' subtraction
    - '*' multiplication
    - '/' division

    Examples: Type the following commands in google developer tools -> console
    ---------
        Addition
       ----------
        var myVar = 5;        
        myVar;        
        5+5;        
        myVar + 10;        
        myVar = myVar + 10;        
        myVar;

        Subtraction
       -------------
        10-5;
        myVar - 2;
        myVar = myVar - 5;
        myVar;

        Multiplication
       ----------------
        10*10;
        myVar * 2;
        myVar = myVar * 2;
        myVar;

        Division
       -----------
        10/2;
        myVar/2;
        myVar = myVar / 2;
        myVar;

        Couple of more things with '+'
       --------------------------------
        concatenation: 5 + "hello" ; -> converts 5 to a string and prints '5hello'
                       "hello" + "world"; -> helloworld
                       "hello" + " world"; -> hello world
                       5 * "hello"; -> NaN (Not a Number)        
----------------------------------------------------------------------------------------------------

Operator Shorthands: (try in google developer tools -> console)
--------------------
- +=
    var myVar = 15;
    myVar = myVar + 5; is the same as -> myVar += 5;

    similarly, for -,*,/
    myVar -= 5; myVar *= 5; myVar /= 10;

- ++
    var myVar = 5;
    myVar = myVar + 1; -> output: 6
    myVar++; -> output: 5
    myVar; -> output: 6
    ++myVar; -> output: 7
-----------------------------------------------------------------------------------------------------

Writing to the document and console: (try in google developer tools -> console)
-------------------------------------
- mainly used for debugging

    var myVar = "hello";
    document.write(myVar); -> to write on the chrome window
    console.log(myVar);    -> to write on the console area in developer tools
    document.write(10);
    console.log(50);
    console.log(10 * 2);
    document.write(20 / 5);
-----------------------------------------------------------------------------------------------------
Booleans:
---------
- Boolean is a value that represents either 'true' or 'false'
- Used to evaluate certain circumstances
- Eg:- User login - user logins with a wrong password -> password evaluation returns false ->
                    prompt the user to enter the password again
                  - user logins with the right password -> password evaluation returns true ->
                    login successful
- Use chrome developer tools -> console to try the cmds below
    var bool = true;
    bool;
    bool = "true"; -> this is not a boolean value, but a string value assigned to a variable
    bool = false;
    7 > 5; -> true
    7 < 5; -> false
    7 = 7; (should throw an exception, 
            as '=' is an assignment operator to be used like -> var a = 10;)
    7 == 7; -> true
    7 === 7; -> true
    7 == 5; -> false
    0; -> 0
    1; -> 1
    Boolean (7 > 5); -> true
    Boolean (0); -> false
    Boolean (1); -> true
    Boolean(-5); -> true
    Boolean(-0); -> false
    Boolean ('hello'); -> true
    Boolean (''); -> false

    Boolean is the built-in function in javascript to evaluate the truth or false of an expression
-----------------------------------------------------------------------------------------------------

If Statements and control flow:
-------------------------------
IF you pay for your train ticket
    you won't get a fine

refer - test.js
-----------------------------------------------------------------------------------------------------

ELSE IF Statements:
-------------------
To check mulitple conditions

refer - test.js
-----------------------------------------------------------------------------------------------------

Comparison Operators:
---------------------
- if (x > 5) {} -> '>' is the comparison operator

    List of comparison operators:
    - >
    - <
    - >=
    - <=
    - == (x == 5)
    - === (to check the value and type) -> recommmended
    - != (negation operator)
    - !== (negation to check value and type) -> recommended

    Examples: (try in chrome developer tools -> console & test.js -> If conditions)
    - var x = 5;
    - x;
    - x > 5; -> false
    - x < 5; -> false
    - x >= 5; -> true
    - x <= 5; -> true
    - x == 5; -> true
    - x = "5";
    - x == 5; -> true
    - x === 5; -> false
    - x = 5;
    - x === 5; -> true
    - x != 3; -> true
    - x !== '5'; -> true
    - x !== 5; -> false
-----------------------------------------------------------------------------------------------------

Logical Operators:
------------------
    - &&
    - ||
  refer test.js
-----------------------------------------------------------------------------------------------------
